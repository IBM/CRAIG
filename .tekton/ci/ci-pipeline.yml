apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: code-engine-pipeline
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: repository
      description: the git repo containing source code. If empty, the repository url will be found from toolchain
      default: ""
    - name: branch
      description: the branch for the git repo
      default: "master"
    - name: revision
      description: the git revision/commit for the git repo
      default: ""
    - name: git-token
      description: access token for the git repo
    - name: fail-on-lint-errors
      description: force failure of task when docker lint errors are found
      default: "true"
    - name: fail-on-scanned-issues
      description: force failure of task when vulnerability advisor scan issues are found
      default: "true"
    - name: path-to-context
      default: "."
    - name: path-to-dockerfile
      default: "."
    - name: dockerfile
      default: "Dockerfile"
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: registry-namespace
      description: container registry namespace
    - name: registry-create-namespace
      description: create container registry namespace if it doesn't already exists
      default: "true"
    - name: app-name
      description: application name
    - name: image-name
      description: image name
    - name: region
      description: region of application deployment
    - name: resource-group
      description: resource group for the application deployment
    - name: code-engine-project
      description: Code Engine project for the application deployment
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: custom-script
      description: The command(s) to run the build in run-build step. It will override the default commands

    - name: cpu
      description: number of vCPU of the Code Engine application
      default: "0.25"
    - name: max-scale
      description: maximum scale of the Code Engine application
      default: "1"
    - name: memory
      description: total memory of the Code Engine application
      default: "0.5G"
    - name: min-scale
      description: minimum scale of the Code Engine application
      default: "0"
    - name: port
      description: port where the application is listening
      default: "http1:8080"
    - name: service-bindings
      description: JSON object of a map of names to services instances to be bound to the application
      default: "{}"
    - name: deployment-timeout
      description: maximum timeout for the application deployment.
      default: "300"
    - name: ephemeral-storage
      description: The amount of ephemeral storage to set for the instance of the application.
      default: "0.4G"
    - name: craig-api-key
      description: API Key for SLZ GUI application
      default: ""

      # For health task
    - name: health-endpoint
      description: application health endpoint, e.g. /health
      default: ""

      #Cra specific params
    - name: ibmcloud-region
      description: (Optional) ibmcloud region to use
      default: ""
    - name: apikey
      description: The ibmcloud api key

    # Common command related params
    - name: env-props
      description: (Optional) A custom configuration of environment properties to source before execution, ex. 'export ABC=123 export DEF=456'
      default: ""
    - name: fileignore
      description: (Optional) Filepath to .fileignore
      default: ""
    - name: ibmcloud-trace
      description: (Optional) Enables IBMCLOUD_TRACE for ibmcloud cli logging
      default: "false"
    - name: output
      description: (Optional) Prints command result to console
      default: "false"
    - name: path
      description: Repository path to scan
      default: "/artifacts"
    - name: strict
      description: (Optional) Enables strict mode for scanning
      default: "false"
    - name: toolchainid
      description: (Optional) The target toolchain id to be used. Defaults to the current toolchain id
      default: ""
    - name: verbose
      description: (Optional) Enable verbose log messages
      default: "false"

    # BOM related params
    - name: asset-type
      description: Security checks to run (apps, image, os, all)
      default: "all"
    - name: bom-report
      description: Filepath to store generated Bill of Materials
      default: "bom.json"
    - name: docker-build-flags
      description: (Optional) Customize docker build command for build stage scanning
      default: ""
    - name: docker-build-context
      description: (Optional) If specified, CRA will use the directory in the path parameter as docker build context
    - name: dockerfile-pattern
      description: (Optional) Pattern to identify Dockerfile in the repository
    - name: docker-registry-url
      description: Registry url to use for docker login
      default: ""
    - name: docker-registry-username
      description: Username to authenticate for docker-registry-url
      default: ""
    - name: gradle-exclude-configs
      description: (Optional) Exclude gradle configurations, ex. 'runtimeClasspath,testCompileClasspath'
      default: ""
    - name: maven-exclude-scopes
      description: (Optional) Exclude maven scopes, ex. 'test,compile'
      default: ""
    - name: nodejs-create-package-lock
      description: (Optional) Enable the task to build the package-lock.json for node.js projects
      default: "false"
    - name: prev-report
      description: Filepath to previous BoM report to skip Dockerfile or application manifest scans
      default: ""

    # Deploy Analytic related params
    - name: deploy-report
      description: Filepath to store generated Deploy Analytic report
      default: "deploy.json"

    # Vulnerability related params
    - name: cveignore
      description: (Optional) Filepath to cveignore
      default: ""
    - name: exclude-dev
      description: (Optional) Exclude dev dependencies during vulnerability scan
      default: "false"
    - name: vulnerability-report
      description: Filepath to store Vulnerability report, not stored if empty
      default: "vulnerability.json"

    # User control params
    - name: cra-scan-image
      description: Image to use for `scan` task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.9"
    
    # BuildPack related params
    - name: size
      description:  The size to use for the build, which determines the amount of resources used. Valid values include small, medium, large, xlarge.
      default: "medium"  
    - name: build-strategy
      description:  The strategy to use for building the image. Valid values are 'dockerfile' and 'buildpacks'. 
      default: "dockerfile"
    - name: deployment-type
      description:  Specifies the type of deployment. Valid values are 'application' and 'job'. 
      default: "application"
    - name: maxexecutiontime
      description: The maximum execution time in seconds for runs of the job. 
      default: "7200"
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: extract-repository-url
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          # if a params.repository is given, it takes precedence
          value: '. as $toolchain | ["$(params.repository)"] | if .[0]=="" then $toolchain | .services[] | select(.toolchain_binding.name=="repo") | .dashboard_url else .[0] end'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: git-clone
      taskRef:
        name: git-clone-repo
      params:
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: git-access-token
          value: $(params.git-token)
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: ibmcloud-apikey-secret-key
          value: "toolchain-apikey"
        - name: repository
          value: $(tasks.extract-repository-url.results.extracted-value)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.revision)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: code-risk-analyzer
      runAfter:
        - git-clone
      taskRef:
        name: cra-v2-cra
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: ibmcloud-region
          value: $(params.ibmcloud-region)
        - name: registry-region
          value: $(params.registry-region)
        - name: env-props
          value: $(params.env-props)
        - name: fileignore
          value: $(params.fileignore)
        - name: ibmcloud-trace
          value: $(params.ibmcloud-trace)
        - name: output
          value: $(params.output)
        - name: path
          value: $(params.path)
        - name: strict
          value: $(params.strict)
        - name: toolchainid
          value: $(params.toolchainid)
        - name: verbose
          value: $(params.verbose)
        - name: asset-type
          value: $(params.asset-type)
        - name: bom-report
          value: $(params.bom-report)
        - name: docker-build-flags
          value: $(params.docker-build-flags)
        - name: docker-build-context
          value: $(params.docker-build-context)
        - name: dockerfile-pattern
          value: $(params.dockerfile-pattern)
        - name: docker-registry-url
          value: $(params.docker-registry-url)
        - name: docker-registry-username
          value: $(params.docker-registry-username)
        - name: gradle-exclude-configs
          value: $(params.gradle-exclude-configs)
        - name: maven-exclude-scopes
          value: $(params.maven-exclude-scopes)
        - name: nodejs-create-package-lock
          value: $(params.nodejs-create-package-lock)
        - name: prev-report
          value: $(params.prev-report)
        - name: deploy-report
          value: $(params.deploy-report)
        - name: cveignore
          value: $(params.cveignore)
        - name: exclude-dev
          value: $(params.exclude-dev)
        - name: vulnerability-report
          value: $(params.vulnerability-report)
        - name: cra-scan-image
          value: $(params.cra-scan-image)
        - name: custom-script
          value: $(params.custom-script)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: extract-doi-enablement
      taskRef:
        name: toolchain-extract-value
      params:
        # count the number of service in the toolchain that are DevopsInsights
        - name: expression
          value: 'reduce .services[] as $service (0; if $service.service_id=="draservicebroker" then .+1 else . end)'
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: publish-doi-buildrecord
      runAfter: [extract-doi-enablement]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-buildrecord
      params:
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: app-name
          value: $(params.app-name)
        - name: git-repository
          value: $(tasks.git-clone.results.git-repository)
        - name: git-branch
          value: $(tasks.git-clone.results.git-branch)
        - name: git-commit
          value: $(tasks.git-clone.results.git-commit)
    - name: docker-lint
      when:
        - input: "$(params.build-strategy)"
          operator: in
          values: ["dockerfile"]
      runAfter: [git-clone]
      taskRef:
        name: linter-docker-lint
      params:
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: fail-on-lint-errors
          value: $(params.fail-on-lint-errors)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: workspace
          workspace: pipeline-ws
    - name: build
      runAfter: [git-clone]
      taskRef:
        name: toolchain-build
      params:
        - name: custom-script
          value: $(params.custom-script)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: unit-tests
      runAfter: [build]
      taskRef:
        name: tester-run-tests
      params:
        - name: tests-script
          value: |
            if [ -f ./test/run-tests.sh ]; then
              source ./test/run-tests.sh
              echo -n $FILE_LOCATIONS > $(results.test-result-file-paths.path)
              echo -n $TEST_TYPES > $(results.test-types.path)
            else
              echo "Test runner script not found: ./test/run-tests.sh"
            fi
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-doi-code-tests
      runAfter: [unit-tests]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: "$(tasks.unit-tests.results.test-result-file-paths)"
        - name: test-types
          value: "$(tasks.unit-tests.results.test-types)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: containerize
      runAfter: [build]
      taskRef:
        name: icr-execute-in-dind
      params:
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: registry-create-namespace
          value: $(params.registry-create-namespace)
        - name: registry-region
          value: $(params.registry-region)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: resource-group
          value: $(params.resource-group)
        - name: image-name
          value: $(params.image-name)
        - name: path-to-context
          value: $(params.path-to-context)
        - name: path-to-dockerfile
          value: $(params.path-to-dockerfile)
        - name: dockerfile
          value: $(params.dockerfile)
        - name: docker-commands
          value: |
            # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
            # e.g. 3-master-50da6912-20181123114435
            # (use build number as first segment to allow image tag as a patch release name according to semantic versioning)
            GIT_BRANCH="$(tasks.git-clone.results.git-branch)"
            GIT_COMMIT="$(tasks.git-clone.results.git-commit)"
            TIMESTAMP=$( date -u "+%Y%m%d%H%M%S")
            IMAGE_TAG=${TIMESTAMP}
            if [ ! -z "${GIT_COMMIT}" ]; then
              GIT_COMMIT_SHORT=$( echo ${GIT_COMMIT} | head -c 8 )
              IMAGE_TAG=${GIT_COMMIT_SHORT}-${IMAGE_TAG}
            fi
            if [ ! -z "${GIT_BRANCH}" ]; then IMAGE_TAG=${GIT_BRANCH}-${IMAGE_TAG} ; fi
            IMAGE_TAG=${BUILD_NUMBER}-${IMAGE_TAG}
            echo "$IMAGE_TAG"
            BUILD_STRATEGY="$(params.build-strategy)"
            if [[ "$BUILD_STRATEGY" == "buildpacks" ]]; then
              apk update
              apk add curl 
              curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
              echo "Install the code engine plugin"
              ibmcloud plugin install code-engine
               if [ "$(params.region)" ]; then
                # if cluster region is in the 'ibm:yp:<region>' just keep the region part
                IBM_CLOUD_REGION=$(echo "$(params.region)" | awk -F ':' '{print $NF;}')
              else
                IBM_CLOUD_REGION=$(jq -r '.region_id' /artifacts/_toolchain.json | awk -F: '{print $3}')
              fi
              ibmcloud login --apikey "$(params.apikey)" -r "${IBM_CLOUD_REGION}"
              ibmcloud target -g $(params.resource-group)
              echo "Select Code engine project $(params.code-engine-project)"
              
              if ibmcloud ce project select -n "$(params.code-engine-project)" > /dev/null 2>&1 ;
                then 
                echo "selected the project."
              else 
                echo "IBM code engine project does not exists, Creating it......."
                ibmcloud ce project  create -n "$(params.code-engine-project)"
              fi

              if ibmcloud ce registry get --name "${PIPELINE_ID}" > /dev/null 2>&1 ;
                then 
                echo "${PIPELINE_ID} Secret to push and pull the image already exists."
              else 
                echo "Secret to push and pull the image does not exists, Creating it......."
                ibmcloud ce registry create  --name "${PIPELINE_ID}" --email a@b.com  --password="$(params.apikey)" --server "${REGISTRY_URL}" --username iamapikey
              fi
              echo "using Buildpacks to build application"
              IBMCLOUD_TRACE=true ibmcloud ce buildrun submit --name "${PIPELINE_RUN_ID}" --strategy buildpacks --image "$IMAGE_URL:$IMAGE_TAG" --registry-secret "${PIPELINE_ID}" --source "$PATH_TO_DOCKERFILE" --context-dir "$PATH_TO_CONTEXT" --wait --wait-timeout $(params.deployment-timeout)
              docker pull ${IMAGE_URL}:${IMAGE_TAG}
            else
              echo "Using Dockerfile to build the application image."
              # Default docker build / inspect / push command
              docker build --tag "$IMAGE_URL:$IMAGE_TAG" --file $PATH_TO_DOCKERFILE/$DOCKERFILE $PATH_TO_CONTEXT
              docker inspect ${IMAGE_URL}:${IMAGE_TAG}
              docker push ${IMAGE_URL}:${IMAGE_TAG}
            fi
            
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: source
          workspace: pipeline-ws
    - name: vulnerability-advisor
      taskRef:
        name: icr-check-va-scan
      params:
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: continuous-delivery-context-secret
          value: "secure-properties"
        - name: container-registry-apikey-secret-key
          value: "apikey"
        - name: scan-report-file
          value: 'app-image-va-report.json'
        - name: fail-on-scanned-issues
          value: $(params.fail-on-scanned-issues)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: image-url
          value: $(tasks.containerize.results.image-repository)
        - name: image-digest
          value: $(tasks.containerize.results.image-digest)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-doi-va-scan-record
      runAfter: [vulnerability-advisor]
      when:
        - input: $(tasks.extract-doi-enablement.results.extracted-value)
          operator: in
          values: ["1"]
      taskRef:
        name: doi-publish-testrecord
      params:
        - name: toolchain-apikey-secret-key
          value: "toolchain-apikey"
        - name: build-number
          value: "$(tasks.publish-doi-buildrecord.results.build-number)"
        - name: app-name
          value: $(params.app-name)
        - name: file-locations
          value: $(tasks.vulnerability-advisor.results.scan-report-file)
        - name: test-types
          value: vulnerabilityadvisor
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: deploy-application
      taskRef:
        name: deploy-to-code-engine
      runAfter: [vulnerability-advisor]
      params:
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: shuttle-properties-file
          value: "build.properties"
        - name: app-name
          value: $(params.app-name)
        - name: region
          value: $(params.region)
        - name: resource-group
          value: $(params.resource-group)
        - name: code-engine-project
          value: $(params.code-engine-project)
        - name: service-bindings
          value: $(params.service-bindings)
        - name: cpu
          value: $(params.cpu)
        - name: max-scale
          value: $(params.max-scale)
        - name: memory
          value: $(params.memory)
        - name: min-scale
          value: $(params.min-scale)
        - name: port
          value: $(params.port)
        - name: image-repository
          value: $(tasks.containerize.results.image-repository)
        - name: image-tags
          value: $(tasks.containerize.results.image-tags)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: deployment-timeout
          value: $(params.deployment-timeout)
        - name: ephemeral-storage
          value: $(params.ephemeral-storage)
        - name: deployment-type
          value: $(params.deployment-type)
        - name: maxexecutiontime
          value: $(params.maxexecutiontime)
        - name: craig-api-key
          value: $(params.craig-api-key)
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
    - name: publish-deployable-task
      runAfter: [deploy-application]
      taskRef:
        name: publish-code-engine-deployable-mapping
      params:
        - name: ibmcloud-api
          value: $(params.ibmcloud-api)
        - name: app-name
          value: $(params.app-name)
        - name: region
          value: $(params.region)
        - name: resource-group
          value: $(params.resource-group)
        - name: code-engine-project
          value: $(params.code-engine-project)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: deployment-type
          value: $(params.deployment-type)
    - name: check-application-health
      taskRef:
        name: check-health
      runAfter: [deploy-application]
      params:
        - name: app-hostname
          value: $(tasks.deploy-application.results.app-url)
        - name: health-endpoint
          value: $(params.health-endpoint)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
