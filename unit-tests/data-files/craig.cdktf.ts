import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as ibm from "./.gen/providers/ibm";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: IBM-Cloud/ibm.
For a more precise conversion please use the --provider flag in convert.*/
/*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables*/
const ibmcloudApiKey = new cdktf.TerraformVariable(this, "ibmcloud_api_key", {
  description:
    "The IBM Cloud platform API key needed to deploy IAM enabled resources.",
  sensitive: true,
});
const slzSshKeyPublicKey = new cdktf.TerraformVariable(
  this,
  "slz_ssh_key_public_key",
  {
    default:
      "ssh-rsa AAAAB3NzaC1yc2thisisafakesshkeyDSKLFHSJSADFHGASJDSHDBASJKDASDASWDAS+/DSFSDJKFGXFVJDZHXCDZVZZCDKJFGSDJFZDHCVBSDUCZCXZKCHT= test@fakeemail.com",
    description: "Public SSH Key Value for Slz SSH Key",
    sensitive: true,
  }
);
const ibmResourceGroupSlzManagementRg = new ibm.resourceGroup.ResourceGroup(
  this,
  "slz_management_rg",
  {
    name: "slz-slz-management-rg",
    tags: ["slz", "landing-zone"],
  }
);
const ibmResourceGroupSlzServiceRg = new ibm.resourceGroup.ResourceGroup(
  this,
  "slz_service_rg",
  {
    name: "slz-slz-service-rg",
    tags: ["slz", "landing-zone"],
  }
);
const ibmResourceGroupSlzWorkloadRg = new ibm.resourceGroup.ResourceGroup(
  this,
  "slz_workload_rg",
  {
    name: "slz-slz-workload-rg",
    tags: ["slz", "landing-zone"],
  }
);
const ibmResourceInstanceAtrackerCosObjectStorage =
  new ibm.resourceInstance.ResourceInstance(
    this,
    "atracker_cos_object_storage",
    {
      location: "global",
      name: "slz-atracker-cos-object-storage",
      plan: "standard",
      resource_group_id: ibmResourceGroupSlzServiceRg.id,
      service: "cloud-object-storage",
      tags: ["slz", "landing-zone"],
    }
  );
const ibmResourceInstanceCosObjectStorage =
  new ibm.resourceInstance.ResourceInstance(this, "cos_object_storage", {
    location: "global",
    name: "slz-cos-object-storage",
    plan: "standard",
    resource_group_id: ibmResourceGroupSlzServiceRg.id,
    service: "cloud-object-storage",
    tags: ["slz", "landing-zone"],
  });
const ibmResourceInstanceSlzKms = new ibm.resourceInstance.ResourceInstance(
  this,
  "slz_kms",
  {
    location: "us-south",
    name: "slz-slz-kms",
    plan: "tiered-pricing",
    resource_group_id: ibmResourceGroupSlzServiceRg.id,
    service: "kms",
    tags: ["slz", "landing-zone"],
  }
);
const ibmResourceKeyAtrackerCosObjectStorageKeyCosBindKey =
  new ibm.resourceKey.ResourceKey(
    this,
    "atracker_cos_object_storage_key_cos_bind_key",
    {
      name: "slz-atracker-cos-key-cos-bind-key",
      resource_instance_id: ibmResourceInstanceAtrackerCosObjectStorage.id,
      role: "Writer",
      tags: ["slz", "landing-zone"],
    }
  );
const ibmTgGatewayTransitGateway = new ibm.tgGateway.TgGateway(
  this,
  "transit_gateway",
  {
    global: false,
    location: "us-south",
    name: "slz-transit-gateway",
    resource_group: ibmResourceGroupSlzServiceRg.id,
    timeouts: [
      {
        create: "30m",
        delete: "30m",
      },
    ],
  }
);
const dataIbmIsImageIbmUbuntu18046MinimalAmd642 =
  new ibm.dataIbmIsImage.DataIbmIsImage(
    this,
    "ibm_ubuntu_18_04_6_minimal_amd64_2",
    {
      name: "ibm-ubuntu-18-04-6-minimal-amd64-2",
    }
  );
new ibm.provider.IbmProvider(this, "ibm", {
  ibmcloud_api_key: ibmcloudApiKey.value,
  region: "us-south",
});
new ibm.iamAuthorizationPolicy.IamAuthorizationPolicy(
  this,
  "atracker_cos_cos_to_slz_kms_kms_policy",
  {
    description: "Allow COS instance to read from KMS instance",
    roles: ["Reader"],
    source_resource_instance_id:
      ibmResourceInstanceAtrackerCosObjectStorage.guid,
    source_service_name: "cloud-object-storage",
    target_resource_instance_id: ibmResourceInstanceSlzKms.guid,
    target_service_name: "kms",
  }
);
new ibm.iamAuthorizationPolicy.IamAuthorizationPolicy(
  this,
  "cos_cos_to_slz_kms_kms_policy",
  {
    description: "Allow COS instance to read from KMS instance",
    roles: ["Reader"],
    source_resource_instance_id: ibmResourceInstanceCosObjectStorage.guid,
    source_service_name: "cloud-object-storage",
    target_resource_instance_id: ibmResourceInstanceSlzKms.guid,
    target_service_name: "kms",
  }
);
new ibm.iamAuthorizationPolicy.IamAuthorizationPolicy(
  this,
  "flow_logs_to_cos_object_storage_policy",
  {
    description: "Allow flow logs write access cloud object storage instance",
    roles: ["Writer"],
    source_resource_type: "flow-log-collector",
    source_service_name: "is",
    target_resource_instance_id: ibmResourceInstanceCosObjectStorage.guid,
    target_service_name: "cloud-object-storage",
  }
);
new ibm.iamAuthorizationPolicy.IamAuthorizationPolicy(
  this,
  "slz_kms_block_storage_policy",
  {
    description:
      "Allow block storage volumes to be encrypted by Key Management instance.",
    roles: ["Reader", "Authorization Delegator"],
    source_resource_type: "share",
    source_service_name: "is",
    target_resource_instance_id: ibmResourceInstanceSlzKms.guid,
    target_service_name: "kms",
  }
);
new ibm.iamAuthorizationPolicy.IamAuthorizationPolicy(
  this,
  "slz_kms_server_protect_policy",
  {
    description:
      "Allow block storage volumes to be encrypted by Key Management instance.",
    roles: ["Reader"],
    source_service_name: "server-protect",
    target_resource_instance_id: ibmResourceInstanceSlzKms.guid,
    target_service_name: "kms",
  }
);
const ibmIsSshKeySlzSshKey = new ibm.isSshKey.IsSshKey(this, "slz_ssh_key", {
  name: "slz-slz-ssh-key",
  public_key: slzSshKeyPublicKey.value,
  resource_group: ibmResourceGroupSlzManagementRg.id,
  tags: ["slz", "landing-zone"],
});
const ibmIsVpcManagementVpc = new ibm.isVpc.IsVpc(this, "management_vpc", {
  address_prefix_management: "manual",
  default_network_acl_name: [null],
  default_routing_table_name: [null],
  default_security_group_name: [null],
  name: "slz-management-vpc",
  resource_group: ibmResourceGroupSlzManagementRg.id,
  tags: ["slz", "landing-zone"],
});
const ibmIsVpcWorkloadVpc = new ibm.isVpc.IsVpc(this, "workload_vpc", {
  address_prefix_management: "manual",
  default_network_acl_name: [null],
  default_routing_table_name: [null],
  default_security_group_name: [null],
  name: "slz-workload-vpc",
  resource_group: ibmResourceGroupSlzWorkloadRg.id,
  tags: ["slz", "landing-zone"],
});
const ibmIsVpcAddressPrefixManagementVpeZone1Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "management_vpe_zone_1_prefix",
    {
      cidr: "10.20.10.0/24",
      name: "slz-management-vpe-zone-1",
      vpc: ibmIsVpcManagementVpc.id,
      zone: "us-south-1",
    }
  );
const ibmIsVpcAddressPrefixManagementVpeZone2Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "management_vpe_zone_2_prefix",
    {
      cidr: "10.20.20.0/24",
      name: "slz-management-vpe-zone-2",
      vpc: ibmIsVpcManagementVpc.id,
      zone: "us-south-2",
    }
  );
const ibmIsVpcAddressPrefixManagementVpeZone3Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "management_vpe_zone_3_prefix",
    {
      cidr: "10.20.30.0/24",
      name: "slz-management-vpe-zone-3",
      vpc: ibmIsVpcManagementVpc.id,
      zone: "us-south-3",
    }
  );
const ibmIsVpcAddressPrefixManagementVpnZone1Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "management_vpn_zone_1_prefix",
    {
      cidr: "10.30.10.0/24",
      name: "slz-management-vpn-zone-1",
      vpc: ibmIsVpcManagementVpc.id,
      zone: "us-south-1",
    }
  );
const ibmIsVpcAddressPrefixManagementVsiZone1Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "management_vsi_zone_1_prefix",
    {
      cidr: "10.10.10.0/24",
      name: "slz-management-vsi-zone-1",
      vpc: ibmIsVpcManagementVpc.id,
      zone: "us-south-1",
    }
  );
const ibmIsVpcAddressPrefixManagementVsiZone2Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "management_vsi_zone_2_prefix",
    {
      cidr: "10.10.20.0/24",
      name: "slz-management-vsi-zone-2",
      vpc: ibmIsVpcManagementVpc.id,
      zone: "us-south-2",
    }
  );
const ibmIsVpcAddressPrefixManagementVsiZone3Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "management_vsi_zone_3_prefix",
    {
      cidr: "10.10.30.0/24",
      name: "slz-management-vsi-zone-3",
      vpc: ibmIsVpcManagementVpc.id,
      zone: "us-south-3",
    }
  );
const ibmIsVpcAddressPrefixWorkloadVpeZone1Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "workload_vpe_zone_1_prefix",
    {
      cidr: "10.40.20.0/24",
      name: "slz-workload-vpe-zone-1",
      vpc: ibmIsVpcWorkloadVpc.id,
      zone: "us-south-1",
    }
  );
const ibmIsVpcAddressPrefixWorkloadVpeZone2Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "workload_vpe_zone_2_prefix",
    {
      cidr: "10.50.20.0/24",
      name: "slz-workload-vpe-zone-2",
      vpc: ibmIsVpcWorkloadVpc.id,
      zone: "us-south-2",
    }
  );
const ibmIsVpcAddressPrefixWorkloadVpeZone3Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "workload_vpe_zone_3_prefix",
    {
      cidr: "10.60.20.0/24",
      name: "slz-workload-vpe-zone-3",
      vpc: ibmIsVpcWorkloadVpc.id,
      zone: "us-south-3",
    }
  );
const ibmIsVpcAddressPrefixWorkloadVsiZone1Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "workload_vsi_zone_1_prefix",
    {
      cidr: "10.40.10.0/24",
      name: "slz-workload-vsi-zone-1",
      vpc: ibmIsVpcWorkloadVpc.id,
      zone: "us-south-1",
    }
  );
const ibmIsVpcAddressPrefixWorkloadVsiZone2Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "workload_vsi_zone_2_prefix",
    {
      cidr: "10.50.10.0/24",
      name: "slz-workload-vsi-zone-2",
      vpc: ibmIsVpcWorkloadVpc.id,
      zone: "us-south-2",
    }
  );
const ibmIsVpcAddressPrefixWorkloadVsiZone3Prefix =
  new ibm.isVpcAddressPrefix.IsVpcAddressPrefix(
    this,
    "workload_vsi_zone_3_prefix",
    {
      cidr: "10.60.10.0/24",
      name: "slz-workload-vsi-zone-3",
      vpc: ibmIsVpcWorkloadVpc.id,
      zone: "us-south-3",
    }
  );
const ibmKmsKeyRingsSlzKmsSlzSlzRingRing = new ibm.kmsKeyRings.KmsKeyRings(
  this,
  "slz_kms_slz_slz_ring_ring",
  {
    instance_id: ibmResourceInstanceSlzKms.guid,
    key_ring_id: "slz-slz-kms-slz-slz-ring",
  }
);
new ibm.tgConnection.TgConnection(
  this,
  "transit_gateway_to_management_connection",
  {
    gateway: ibmTgGatewayTransitGateway.id,
    name: "slz-transit-gateway-management-hub-connection",
    network_id: ibmIsVpcManagementVpc.crn,
    network_type: "vpc",
    timeouts: [
      {
        create: "30m",
        delete: "30m",
      },
    ],
  }
);
new ibm.tgConnection.TgConnection(
  this,
  "transit_gateway_to_workload_connection",
  {
    gateway: ibmTgGatewayTransitGateway.id,
    name: "slz-transit-gateway-workload-hub-connection",
    network_id: ibmIsVpcWorkloadVpc.crn,
    network_type: "vpc",
    timeouts: [
      {
        create: "30m",
        delete: "30m",
      },
    ],
  }
);
const ibmIsNetworkAclManagementManagementAcl =
  new ibm.isNetworkAcl.IsNetworkAcl(this, "management_management_acl", {
    name: "slz-management-management-acl",
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
  });
const ibmIsNetworkAclWorkloadWorkloadAcl = new ibm.isNetworkAcl.IsNetworkAcl(
  this,
  "workload_workload_acl",
  {
    name: "slz-workload-workload-acl",
    resource_group: ibmResourceGroupSlzWorkloadRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcWorkloadVpc.id,
  }
);
new ibm.isNetworkAclRule.IsNetworkAclRule(
  this,
  "management_management_acl_rule_allow_all_network_inbound",
  {
    action: "allow",
    destination: "10.0.0.0/8",
    direction: "inbound",
    name: "allow-all-network-inbound",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    source: "10.0.0.0/8",
  }
);
new ibm.isNetworkAclRule.IsNetworkAclRule(
  this,
  "management_management_acl_rule_allow_all_outbound",
  {
    action: "allow",
    destination: "0.0.0.0/0",
    direction: "outbound",
    name: "allow-all-outbound",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    source: "0.0.0.0/0",
  }
);
new ibm.isNetworkAclRule.IsNetworkAclRule(
  this,
  "management_management_acl_rule_allow_ibm_inbound",
  {
    action: "allow",
    destination: "10.0.0.0/8",
    direction: "inbound",
    name: "allow-ibm-inbound",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    source: "161.26.0.0/16",
  }
);
new ibm.isNetworkAclRule.IsNetworkAclRule(
  this,
  "workload_workload_acl_rule_allow_all_network_inbound",
  {
    action: "allow",
    destination: "10.0.0.0/8",
    direction: "inbound",
    name: "allow-all-network-inbound",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    source: "10.0.0.0/8",
  }
);
new ibm.isNetworkAclRule.IsNetworkAclRule(
  this,
  "workload_workload_acl_rule_allow_all_outbound",
  {
    action: "allow",
    destination: "0.0.0.0/0",
    direction: "outbound",
    name: "allow-all-outbound",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    source: "0.0.0.0/0",
  }
);
new ibm.isNetworkAclRule.IsNetworkAclRule(
  this,
  "workload_workload_acl_rule_allow_ibm_inbound",
  {
    action: "allow",
    destination: "10.0.0.0/8",
    direction: "inbound",
    name: "allow-ibm-inbound",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    source: "161.26.0.0/16",
  }
);
const ibmIsSecurityGroupManagementVpcManagementVpeSgSg =
  new ibm.isSecurityGroup.IsSecurityGroup(
    this,
    "management_vpc_management_vpe_sg_sg",
    {
      name: "slz-management-management-vpe-sg-sg",
      resource_group: ibmResourceGroupSlzManagementRg.id,
      tags: ["slz", "landing-zone"],
      vpc: ibmIsVpcManagementVpc.id,
    }
  );
const ibmIsSecurityGroupWorkloadVpcWorkloadVpeSgSg =
  new ibm.isSecurityGroup.IsSecurityGroup(
    this,
    "workload_vpc_workload_vpe_sg_sg",
    {
      name: "slz-workload-workload-vpe-sg-sg",
      resource_group: ibmResourceGroupSlzWorkloadRg.id,
      tags: ["slz", "landing-zone"],
      vpc: ibmIsVpcWorkloadVpc.id,
    }
  );
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "management_vpc_management_vpe_sg_sg_rule_allow_ibm_inbound",
  {
    direction: "inbound",
    group: ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id,
    remote: "161.26.0.0/16",
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "management_vpc_management_vpe_sg_sg_rule_allow_ibm_tcp_443_outbound",
  {
    direction: "outbound",
    group: ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id,
    remote: "161.26.0.0/16",
    tcp: [
      {
        port_max: 443,
        port_min: 443,
      },
    ],
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "management_vpc_management_vpe_sg_sg_rule_allow_ibm_tcp_53_outbound",
  {
    direction: "outbound",
    group: ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id,
    remote: "161.26.0.0/16",
    tcp: [
      {
        port_max: 53,
        port_min: 53,
      },
    ],
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "management_vpc_management_vpe_sg_sg_rule_allow_ibm_tcp_80_outbound",
  {
    direction: "outbound",
    group: ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id,
    remote: "161.26.0.0/16",
    tcp: [
      {
        port_max: 80,
        port_min: 80,
      },
    ],
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "management_vpc_management_vpe_sg_sg_rule_allow_vpc_inbound",
  {
    direction: "inbound",
    group: ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id,
    remote: "10.0.0.0/8",
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "management_vpc_management_vpe_sg_sg_rule_allow_vpc_outbound",
  {
    direction: "outbound",
    group: ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id,
    remote: "10.0.0.0/8",
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "workload_vpc_workload_vpe_sg_sg_rule_allow_ibm_inbound",
  {
    direction: "inbound",
    group: ibmIsSecurityGroupWorkloadVpcWorkloadVpeSgSg.id,
    remote: "161.26.0.0/16",
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "workload_vpc_workload_vpe_sg_sg_rule_allow_ibm_tcp_443_outbound",
  {
    direction: "outbound",
    group: ibmIsSecurityGroupWorkloadVpcWorkloadVpeSgSg.id,
    remote: "161.26.0.0/16",
    tcp: [
      {
        port_max: 443,
        port_min: 443,
      },
    ],
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "workload_vpc_workload_vpe_sg_sg_rule_allow_ibm_tcp_53_outbound",
  {
    direction: "outbound",
    group: ibmIsSecurityGroupWorkloadVpcWorkloadVpeSgSg.id,
    remote: "161.26.0.0/16",
    tcp: [
      {
        port_max: 53,
        port_min: 53,
      },
    ],
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "workload_vpc_workload_vpe_sg_sg_rule_allow_ibm_tcp_80_outbound",
  {
    direction: "outbound",
    group: ibmIsSecurityGroupWorkloadVpcWorkloadVpeSgSg.id,
    remote: "161.26.0.0/16",
    tcp: [
      {
        port_max: 80,
        port_min: 80,
      },
    ],
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "workload_vpc_workload_vpe_sg_sg_rule_allow_vpc_inbound",
  {
    direction: "inbound",
    group: ibmIsSecurityGroupWorkloadVpcWorkloadVpeSgSg.id,
    remote: "10.0.0.0/8",
  }
);
new ibm.isSecurityGroupRule.IsSecurityGroupRule(
  this,
  "workload_vpc_workload_vpe_sg_sg_rule_allow_vpc_outbound",
  {
    direction: "outbound",
    group: ibmIsSecurityGroupWorkloadVpcWorkloadVpeSgSg.id,
    remote: "10.0.0.0/8",
  }
);
const ibmIsSubnetManagementVpeZone1 = new ibm.isSubnet.IsSubnet(
  this,
  "management_vpe_zone_1",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixManagementVpeZone1Prefix.cidr,
    name: "slz-management-vpe-zone-1",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-1",
  }
);
const ibmIsSubnetManagementVpeZone2 = new ibm.isSubnet.IsSubnet(
  this,
  "management_vpe_zone_2",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixManagementVpeZone2Prefix.cidr,
    name: "slz-management-vpe-zone-2",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-2",
  }
);
const ibmIsSubnetManagementVpeZone3 = new ibm.isSubnet.IsSubnet(
  this,
  "management_vpe_zone_3",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixManagementVpeZone3Prefix.cidr,
    name: "slz-management-vpe-zone-3",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-3",
  }
);
const ibmIsSubnetManagementVpnZone1 = new ibm.isSubnet.IsSubnet(
  this,
  "management_vpn_zone_1",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixManagementVpnZone1Prefix.cidr,
    name: "slz-management-vpn-zone-1",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-1",
  }
);
const ibmIsSubnetManagementVsiZone1 = new ibm.isSubnet.IsSubnet(
  this,
  "management_vsi_zone_1",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixManagementVsiZone1Prefix.cidr,
    name: "slz-management-vsi-zone-1",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-1",
  }
);
const ibmIsSubnetManagementVsiZone2 = new ibm.isSubnet.IsSubnet(
  this,
  "management_vsi_zone_2",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixManagementVsiZone2Prefix.cidr,
    name: "slz-management-vsi-zone-2",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-2",
  }
);
const ibmIsSubnetManagementVsiZone3 = new ibm.isSubnet.IsSubnet(
  this,
  "management_vsi_zone_3",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixManagementVsiZone3Prefix.cidr,
    name: "slz-management-vsi-zone-3",
    network_acl: ibmIsNetworkAclManagementManagementAcl.id,
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-3",
  }
);
const ibmIsSubnetWorkloadVpeZone1 = new ibm.isSubnet.IsSubnet(
  this,
  "workload_vpe_zone_1",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixWorkloadVpeZone1Prefix.cidr,
    name: "slz-workload-vpe-zone-1",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    resource_group: ibmResourceGroupSlzWorkloadRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcWorkloadVpc.id,
    zone: "us-south-1",
  }
);
const ibmIsSubnetWorkloadVpeZone2 = new ibm.isSubnet.IsSubnet(
  this,
  "workload_vpe_zone_2",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixWorkloadVpeZone2Prefix.cidr,
    name: "slz-workload-vpe-zone-2",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    resource_group: ibmResourceGroupSlzWorkloadRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcWorkloadVpc.id,
    zone: "us-south-2",
  }
);
const ibmIsSubnetWorkloadVpeZone3 = new ibm.isSubnet.IsSubnet(
  this,
  "workload_vpe_zone_3",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixWorkloadVpeZone3Prefix.cidr,
    name: "slz-workload-vpe-zone-3",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    resource_group: ibmResourceGroupSlzWorkloadRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcWorkloadVpc.id,
    zone: "us-south-3",
  }
);
const ibmIsSubnetWorkloadVsiZone1 = new ibm.isSubnet.IsSubnet(
  this,
  "workload_vsi_zone_1",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixWorkloadVsiZone1Prefix.cidr,
    name: "slz-workload-vsi-zone-1",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    resource_group: ibmResourceGroupSlzWorkloadRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcWorkloadVpc.id,
    zone: "us-south-1",
  }
);
const ibmIsSubnetWorkloadVsiZone2 = new ibm.isSubnet.IsSubnet(
  this,
  "workload_vsi_zone_2",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixWorkloadVsiZone2Prefix.cidr,
    name: "slz-workload-vsi-zone-2",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    resource_group: ibmResourceGroupSlzWorkloadRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcWorkloadVpc.id,
    zone: "us-south-2",
  }
);
const ibmIsSubnetWorkloadVsiZone3 = new ibm.isSubnet.IsSubnet(
  this,
  "workload_vsi_zone_3",
  {
    ipv4_cidr_block: ibmIsVpcAddressPrefixWorkloadVsiZone3Prefix.cidr,
    name: "slz-workload-vsi-zone-3",
    network_acl: ibmIsNetworkAclWorkloadWorkloadAcl.id,
    resource_group: ibmResourceGroupSlzWorkloadRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcWorkloadVpc.id,
    zone: "us-south-3",
  }
);
const ibmIsSubnetReservedIpManagementVpcVpeZone1SubnetVpeIp =
  new ibm.isSubnetReservedIp.IsSubnetReservedIp(
    this,
    "management_vpc_vpe_zone_1_subnet_vpe_ip",
    {
      subnet: ibmIsSubnetManagementVpeZone1.id,
    }
  );
const ibmIsSubnetReservedIpManagementVpcVpeZone2SubnetVpeIp =
  new ibm.isSubnetReservedIp.IsSubnetReservedIp(
    this,
    "management_vpc_vpe_zone_2_subnet_vpe_ip",
    {
      subnet: ibmIsSubnetManagementVpeZone2.id,
    }
  );
const ibmIsSubnetReservedIpManagementVpcVpeZone3SubnetVpeIp =
  new ibm.isSubnetReservedIp.IsSubnetReservedIp(
    this,
    "management_vpc_vpe_zone_3_subnet_vpe_ip",
    {
      subnet: ibmIsSubnetManagementVpeZone3.id,
    }
  );
const ibmIsSubnetReservedIpWorkloadVpcVpeZone1SubnetVpeIp =
  new ibm.isSubnetReservedIp.IsSubnetReservedIp(
    this,
    "workload_vpc_vpe_zone_1_subnet_vpe_ip",
    {
      subnet: ibmIsSubnetWorkloadVpeZone1.id,
    }
  );
const ibmIsSubnetReservedIpWorkloadVpcVpeZone2SubnetVpeIp =
  new ibm.isSubnetReservedIp.IsSubnetReservedIp(
    this,
    "workload_vpc_vpe_zone_2_subnet_vpe_ip",
    {
      subnet: ibmIsSubnetWorkloadVpeZone2.id,
    }
  );
const ibmIsSubnetReservedIpWorkloadVpcVpeZone3SubnetVpeIp =
  new ibm.isSubnetReservedIp.IsSubnetReservedIp(
    this,
    "workload_vpc_vpe_zone_3_subnet_vpe_ip",
    {
      subnet: ibmIsSubnetWorkloadVpeZone3.id,
    }
  );
const ibmIsVirtualEndpointGatewayManagementVpcCosVpeGateway =
  new ibm.isVirtualEndpointGateway.IsVirtualEndpointGateway(
    this,
    "management_vpc_cos_vpe_gateway",
    {
      name: "slz-management-cos-vpe-gw",
      resource_group: ibmResourceGroupSlzManagementRg.id,
      security_groups: [ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id],
      tags: ["slz", "landing-zone"],
      target: [
        {
          crn: "crn:v1:bluemix:public:cloud-object-storage:global:::endpoint:s3.direct.us-south.cloud-object-storage.appdomain.cloud",
          resource_type: "provider_cloud_service",
        },
      ],
      vpc: ibmIsVpcManagementVpc.id,
    }
  );
const ibmIsVirtualEndpointGatewayWorkloadVpcCosVpeGateway =
  new ibm.isVirtualEndpointGateway.IsVirtualEndpointGateway(
    this,
    "workload_vpc_cos_vpe_gateway",
    {
      name: "slz-workload-cos-vpe-gw",
      resource_group: ibmResourceGroupSlzWorkloadRg.id,
      security_groups: [ibmIsSecurityGroupWorkloadVpcWorkloadVpeSgSg.id],
      tags: ["slz", "landing-zone"],
      target: [
        {
          crn: "crn:v1:bluemix:public:cloud-object-storage:global:::endpoint:s3.direct.us-south.cloud-object-storage.appdomain.cloud",
          resource_type: "provider_cloud_service",
        },
      ],
      vpc: ibmIsVpcWorkloadVpc.id,
    }
  );
new ibm.isVirtualEndpointGatewayIp.IsVirtualEndpointGatewayIp(
  this,
  "management_vpc_cos_gw_vpe_zone_1_gateway_ip",
  {
    gateway: ibmIsVirtualEndpointGatewayManagementVpcCosVpeGateway.id,
    reserved_ip:
      ibmIsSubnetReservedIpManagementVpcVpeZone1SubnetVpeIp.reservedIp,
  }
);
new ibm.isVirtualEndpointGatewayIp.IsVirtualEndpointGatewayIp(
  this,
  "management_vpc_cos_gw_vpe_zone_2_gateway_ip",
  {
    gateway: ibmIsVirtualEndpointGatewayManagementVpcCosVpeGateway.id,
    reserved_ip:
      ibmIsSubnetReservedIpManagementVpcVpeZone2SubnetVpeIp.reservedIp,
  }
);
new ibm.isVirtualEndpointGatewayIp.IsVirtualEndpointGatewayIp(
  this,
  "management_vpc_cos_gw_vpe_zone_3_gateway_ip",
  {
    gateway: ibmIsVirtualEndpointGatewayManagementVpcCosVpeGateway.id,
    reserved_ip:
      ibmIsSubnetReservedIpManagementVpcVpeZone3SubnetVpeIp.reservedIp,
  }
);
new ibm.isVirtualEndpointGatewayIp.IsVirtualEndpointGatewayIp(
  this,
  "workload_vpc_cos_gw_vpe_zone_1_gateway_ip",
  {
    gateway: ibmIsVirtualEndpointGatewayWorkloadVpcCosVpeGateway.id,
    reserved_ip: ibmIsSubnetReservedIpWorkloadVpcVpeZone1SubnetVpeIp.reservedIp,
  }
);
new ibm.isVirtualEndpointGatewayIp.IsVirtualEndpointGatewayIp(
  this,
  "workload_vpc_cos_gw_vpe_zone_2_gateway_ip",
  {
    gateway: ibmIsVirtualEndpointGatewayWorkloadVpcCosVpeGateway.id,
    reserved_ip: ibmIsSubnetReservedIpWorkloadVpcVpeZone2SubnetVpeIp.reservedIp,
  }
);
new ibm.isVirtualEndpointGatewayIp.IsVirtualEndpointGatewayIp(
  this,
  "workload_vpc_cos_gw_vpe_zone_3_gateway_ip",
  {
    gateway: ibmIsVirtualEndpointGatewayWorkloadVpcCosVpeGateway.id,
    reserved_ip: ibmIsSubnetReservedIpWorkloadVpcVpeZone3SubnetVpeIp.reservedIp,
  }
);
new ibm.isVpnGateway.IsVpnGateway(
  this,
  "management_management_gateway_vpn_gw",
  {
    name: "slz-management-management-gateway-vpn-gw",
    resource_group: ibmResourceGroupSlzManagementRg.id,
    subnet: ibmIsSubnetManagementVpnZone1.id,
    tags: ["slz", "landing-zone"],
    timeouts: [
      {
        delete: "1h",
      },
    ],
  }
);
const ibmKmsKeySlzKmsSlzAtrackerKeyKey = new ibm.kmsKey.KmsKey(
  this,
  "slz_kms_slz_atracker_key_key",
  {
    depends_on: [
      "ibm_iam_authorization_policy.slz_kms_server_protect_policy",
      "ibm_iam_authorization_policy.slz_kms_block_storage_policy",
    ],
    endpoint_type: "public",
    force_delete: true,
    instance_id: ibmResourceInstanceSlzKms.guid,
    key_name: "slz-slz-kms-slz-atracker-key",
    key_ring_id: ibmKmsKeyRingsSlzKmsSlzSlzRingRing.keyRingId,
    standard_key: false,
  }
);
const ibmKmsKeySlzKmsSlzSlzKeyKey = new ibm.kmsKey.KmsKey(
  this,
  "slz_kms_slz_slz_key_key",
  {
    depends_on: [
      "ibm_iam_authorization_policy.slz_kms_server_protect_policy",
      "ibm_iam_authorization_policy.slz_kms_block_storage_policy",
    ],
    endpoint_type: "public",
    force_delete: true,
    instance_id: ibmResourceInstanceSlzKms.guid,
    key_name: "slz-slz-kms-slz-slz-key",
    key_ring_id: ibmKmsKeyRingsSlzKmsSlzSlzRingRing.keyRingId,
    standard_key: false,
  }
);
const ibmKmsKeySlzKmsSlzVsiVolumeKeyKey = new ibm.kmsKey.KmsKey(
  this,
  "slz_kms_slz_vsi_volume_key_key",
  {
    depends_on: [
      "ibm_iam_authorization_policy.slz_kms_server_protect_policy",
      "ibm_iam_authorization_policy.slz_kms_block_storage_policy",
    ],
    endpoint_type: "public",
    force_delete: true,
    instance_id: ibmResourceInstanceSlzKms.guid,
    key_name: "slz-slz-kms-slz-vsi-volume-key",
    key_ring_id: ibmKmsKeyRingsSlzKmsSlzSlzRingRing.keyRingId,
    standard_key: false,
  }
);
new ibm.kmsKeyPolicies.KmsKeyPolicies(
  this,
  "slz_kms_slz_atracker_key_key_policy",
  {
    dual_auth_delete: [
      {
        enabled: false,
      },
    ],
    endpoint_type: "public",
    instance_id: ibmResourceInstanceSlzKms.guid,
    key_id: ibmKmsKeySlzKmsSlzAtrackerKeyKey.keyId,
    rotation: [
      {
        interval_month: 12,
      },
    ],
  }
);
new ibm.kmsKeyPolicies.KmsKeyPolicies(this, "slz_kms_slz_slz_key_key_policy", {
  dual_auth_delete: [
    {
      enabled: false,
    },
  ],
  endpoint_type: "public",
  instance_id: ibmResourceInstanceSlzKms.guid,
  key_id: ibmKmsKeySlzKmsSlzSlzKeyKey.keyId,
  rotation: [
    {
      interval_month: 12,
    },
  ],
});
new ibm.kmsKeyPolicies.KmsKeyPolicies(
  this,
  "slz_kms_slz_vsi_volume_key_key_policy",
  {
    dual_auth_delete: [
      {
        enabled: false,
      },
    ],
    endpoint_type: "public",
    instance_id: ibmResourceInstanceSlzKms.guid,
    key_id: ibmKmsKeySlzKmsSlzVsiVolumeKeyKey.keyId,
    rotation: [
      {
        interval_month: 12,
      },
    ],
  }
);
const ibmContainerVpcClusterWorkloadVpcWorkloadCluster =
  new ibm.containerVpcCluster.ContainerVpcCluster(
    this,
    "workload_vpc_workload_cluster",
    {
      cos_instance_crn: ibmResourceInstanceCosObjectStorage.crn,
      disable_public_service_endpoint: false,
      entitlement: "cloud_pak",
      flavor: "bx2.16x64",
      kms_config: [
        {
          crk_id: ibmKmsKeySlzKmsSlzVsiVolumeKeyKey.keyId,
          instance_id: ibmResourceInstanceSlzKms.guid,
          private_endpoint: false,
        },
      ],
      kube_version: "default",
      name: "slz-workload-cluster",
      resource_group_id: ibmResourceGroupSlzWorkloadRg.id,
      tags: ["slz", "landing-zone"],
      timeouts: [
        {
          create: "3h",
          delete: "2h",
          update: "3h",
        },
      ],
      update_all_workers: [null],
      vpc_id: ibmIsVpcWorkloadVpc.id,
      wait_till: "IngressReady",
      worker_count: 2,
      zones: [
        {
          name: "us-south-1",
          subnet_id: ibmIsSubnetWorkloadVsiZone1.id,
        },
        {
          name: "us-south-2",
          subnet_id: ibmIsSubnetWorkloadVsiZone2.id,
        },
        {
          name: "us-south-3",
          subnet_id: ibmIsSubnetWorkloadVsiZone3.id,
        },
      ],
    }
  );
new ibm.containerVpcWorkerPool.ContainerVpcWorkerPool(
  this,
  "workload_vpc_workload_cluster_logging_pool_pool",
  {
    cluster: ibmContainerVpcClusterWorkloadVpcWorkloadCluster.id,
    entitlement: "cloud_pak",
    flavor: "bx2.16x64",
    resource_group_id: ibmResourceGroupSlzWorkloadRg.id,
    vpc_id: ibmIsVpcWorkloadVpc.id,
    worker_count: 2,
    worker_pool_name: "slz-workload-cluster-logging-pool",
    zones: [
      {
        name: "us-south-1",
        subnet_id: ibmIsSubnetWorkloadVsiZone1.id,
      },
      {
        name: "us-south-2",
        subnet_id: ibmIsSubnetWorkloadVsiZone2.id,
      },
      {
        name: "us-south-3",
        subnet_id: ibmIsSubnetWorkloadVsiZone3.id,
      },
    ],
  }
);
const ibmCosBucketAtrackerCosObjectStorageAtrackerBucketBucket =
  new ibm.cosBucket.CosBucket(
    this,
    "atracker_cos_object_storage_atracker_bucket_bucket",
    {
      bucket_name: "slz-atracker-cos-atracker-bucket",
      depends_on: [
        "ibm_iam_authorization_policy.atracker_cos_cos_to_slz_kms_kms_policy",
      ],
      endpoint_type: "public",
      force_delete: true,
      key_protect: ibmKmsKeySlzKmsSlzAtrackerKeyKey.crn,
      region_location: "us-south",
      resource_instance_id: ibmResourceInstanceAtrackerCosObjectStorage.id,
      storage_class: "standard",
    }
  );
const ibmCosBucketCosObjectStorageManagementBucketBucket =
  new ibm.cosBucket.CosBucket(
    this,
    "cos_object_storage_management_bucket_bucket",
    {
      bucket_name: "slz-cos-management-bucket",
      depends_on: [
        "ibm_iam_authorization_policy.cos_cos_to_slz_kms_kms_policy",
      ],
      endpoint_type: "public",
      force_delete: true,
      key_protect: ibmKmsKeySlzKmsSlzSlzKeyKey.crn,
      region_location: "us-south",
      resource_instance_id: ibmResourceInstanceCosObjectStorage.id,
      storage_class: "standard",
    }
  );
new ibm.cosBucket.CosBucket(this, "cos_object_storage_workload_bucket_bucket", {
  bucket_name: "slz-cos-workload-bucket",
  depends_on: ["ibm_iam_authorization_policy.cos_cos_to_slz_kms_kms_policy"],
  endpoint_type: "public",
  force_delete: true,
  key_protect: ibmKmsKeySlzKmsSlzSlzKeyKey.crn,
  region_location: "us-south",
  resource_instance_id: ibmResourceInstanceCosObjectStorage.id,
  storage_class: "standard",
});
new ibm.isFlowLog.IsFlowLog(this, "management_flow_log_collector", {
  active: true,
  depends_on: [
    "ibm_iam_authorization_policy.flow_logs_to_cos_object_storage_policy",
  ],
  name: "slz-management-vpc-logs",
  resource_group: ibmResourceGroupSlzManagementRg.id,
  storage_bucket: ibmCosBucketCosObjectStorageManagementBucketBucket.bucketName,
  tags: ["slz", "landing-zone"],
  target: ibmIsVpcManagementVpc.id,
});
new ibm.isFlowLog.IsFlowLog(this, "workload_flow_log_collector", {
  active: true,
  depends_on: [
    "ibm_iam_authorization_policy.flow_logs_to_cos_object_storage_policy",
  ],
  name: "slz-workload-vpc-logs",
  resource_group: ibmResourceGroupSlzWorkloadRg.id,
  storage_bucket: ibmCosBucketCosObjectStorageManagementBucketBucket.bucketName,
  tags: ["slz", "landing-zone"],
  target: ibmIsVpcWorkloadVpc.id,
});
new ibm.isInstance.IsInstance(
  this,
  "management_vpc_management_server_vsi_1_1",
  {
    boot_volume: [
      {
        encryption: ibmKmsKeySlzKmsSlzVsiVolumeKeyKey.crn,
      },
    ],
    image: dataIbmIsImageIbmUbuntu18046MinimalAmd642.id,
    keys: [ibmIsSshKeySlzSshKey.id],
    name: "slz-management-management-server-vsi-zone-1-1",
    primary_network_interface: [
      {
        security_groups: [ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id],
        subnet: ibmIsSubnetManagementVsiZone1.id,
      },
    ],
    profile: "cx2-4x8",
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-1",
  }
);
new ibm.isInstance.IsInstance(
  this,
  "management_vpc_management_server_vsi_1_2",
  {
    boot_volume: [
      {
        encryption: ibmKmsKeySlzKmsSlzVsiVolumeKeyKey.crn,
      },
    ],
    image: dataIbmIsImageIbmUbuntu18046MinimalAmd642.id,
    keys: [ibmIsSshKeySlzSshKey.id],
    name: "slz-management-management-server-vsi-zone-1-2",
    primary_network_interface: [
      {
        security_groups: [ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id],
        subnet: ibmIsSubnetManagementVsiZone1.id,
      },
    ],
    profile: "cx2-4x8",
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-1",
  }
);
new ibm.isInstance.IsInstance(
  this,
  "management_vpc_management_server_vsi_2_1",
  {
    boot_volume: [
      {
        encryption: ibmKmsKeySlzKmsSlzVsiVolumeKeyKey.crn,
      },
    ],
    image: dataIbmIsImageIbmUbuntu18046MinimalAmd642.id,
    keys: [ibmIsSshKeySlzSshKey.id],
    name: "slz-management-management-server-vsi-zone-2-1",
    primary_network_interface: [
      {
        security_groups: [ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id],
        subnet: ibmIsSubnetManagementVsiZone2.id,
      },
    ],
    profile: "cx2-4x8",
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-2",
  }
);
new ibm.isInstance.IsInstance(
  this,
  "management_vpc_management_server_vsi_2_2",
  {
    boot_volume: [
      {
        encryption: ibmKmsKeySlzKmsSlzVsiVolumeKeyKey.crn,
      },
    ],
    image: dataIbmIsImageIbmUbuntu18046MinimalAmd642.id,
    keys: [ibmIsSshKeySlzSshKey.id],
    name: "slz-management-management-server-vsi-zone-2-2",
    primary_network_interface: [
      {
        security_groups: [ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id],
        subnet: ibmIsSubnetManagementVsiZone2.id,
      },
    ],
    profile: "cx2-4x8",
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-2",
  }
);
new ibm.isInstance.IsInstance(
  this,
  "management_vpc_management_server_vsi_3_1",
  {
    boot_volume: [
      {
        encryption: ibmKmsKeySlzKmsSlzVsiVolumeKeyKey.crn,
      },
    ],
    image: dataIbmIsImageIbmUbuntu18046MinimalAmd642.id,
    keys: [ibmIsSshKeySlzSshKey.id],
    name: "slz-management-management-server-vsi-zone-3-1",
    primary_network_interface: [
      {
        security_groups: [ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id],
        subnet: ibmIsSubnetManagementVsiZone3.id,
      },
    ],
    profile: "cx2-4x8",
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-3",
  }
);
new ibm.isInstance.IsInstance(
  this,
  "management_vpc_management_server_vsi_3_2",
  {
    boot_volume: [
      {
        encryption: ibmKmsKeySlzKmsSlzVsiVolumeKeyKey.crn,
      },
    ],
    image: dataIbmIsImageIbmUbuntu18046MinimalAmd642.id,
    keys: [ibmIsSshKeySlzSshKey.id],
    name: "slz-management-management-server-vsi-zone-3-2",
    primary_network_interface: [
      {
        security_groups: [ibmIsSecurityGroupManagementVpcManagementVpeSgSg.id],
        subnet: ibmIsSubnetManagementVsiZone3.id,
      },
    ],
    profile: "cx2-4x8",
    resource_group: ibmResourceGroupSlzManagementRg.id,
    tags: ["slz", "landing-zone"],
    vpc: ibmIsVpcManagementVpc.id,
    zone: "us-south-3",
  }
);
const ibmAtrackerTargetSlzAtrackerCosTarget =
  new ibm.atrackerTarget.AtrackerTarget(this, "slz_atracker_cos_target", {
    cos_endpoint: [
      {
        api_key:
          ibmResourceKeyAtrackerCosObjectStorageKeyCosBindKey.credentials
            .apikey,
        bucket:
          ibmCosBucketAtrackerCosObjectStorageAtrackerBucketBucket.bucketName,
        endpoint: "s3.private.us-south.cloud-object-storage.appdomain.cloud",
        target_crn: ibmResourceInstanceAtrackerCosObjectStorage.id,
      },
    ],
    name: "slz-slz-atracker-cos",
    region: "us-south",
    target_type: "cloud_object_storage",
  });
new ibm.atrackerRoute.AtrackerRoute(this, "slz_atracker_cos_route", {
  name: "slz-slz-atracker-cos-route",
  rules: [
    {
      locations: ["global", "us-south"],
      target_ids: [ibmAtrackerTargetSlzAtrackerCosTarget.id],
    },
  ],
});

