const {
  hasDuplicateName,
  genericNameCallback,
  invalidName,
  propsMatchState,
  disableSave,
  invalidNameText,
  validSshKey,
  invalidSubnetTierName,
  invalidSubnetTierText,
  formatConfig,
  getSubnetTierStateData,
  getTierSubnets,
  invalidNewResourceName,
  invalidIpCommaList,
  copyAclModalContent,
  copyRuleCodeMirrorData,
  copySgModalContent,
  forceShowForm,
  disableSshKeyDelete,
  cidrBlocksOverlap,
  hasOverlappingCidr,
  invalidCidr,
  invalidCidrText,
  invalidProjectName,
  invalidProjectNameText,
  invalidProjectDescription,
  invalidCidrBlock,
  invalidCrnList,
  invalidCrns,
  invalidCrnText,
  wizard,
  getDisplaySubnetTiers,
  getDisplayTierSubnetList,
  shouldDisplayService,
} = require("./forms");
const { slzToCraig } = require("./slz-to-craig");
const validate = require("./validate");
const { docsToMd, allDocs } = require("./docs-to-md");
const { buildSubnet, newF5Vsi } = require("./builders");
const changelogToMarkdown = require("./changelog-to-markdown");
const constants = require("./constants");
const {
  formatPgw,
  formatSubnet,
  formatAcl,
  formatAclRule,
  tfDone,
  formatVpc,
  tfBlock,
  iamTf,
  formatIamAccountSettings,
  resourceGroupTf,
  lbTf,
  appidTf,
  atrackerTf,
  clusterTf,
  eventStreamsTf,
  f5Tf,
  f5CloudInitYaml,
  flowLogsTf,
  kmsTf,
  cosTf,
  sccTf,
  secretsManagerTf,
  sgTf,
  sshKeyTf,
  tgwTf,
  vpcTf,
  vpeTf,
  vpnTf,
  vsiTf,
  configToFilesJson,
  codeMirrorVpcTf,
  codeMirrorAclTf,
  codeMirrorSubnetsTf,
  codeMirrorEventStreamsTf,
  codeMirrorFormatIamAccountSettingsTf,
  codeMirrorGetDisplay,
  buildTitleComment,
  formatRoutingTable,
  ibmIsVpcRoutingTable,
  ibmIsVpcRoutingTableRoute,
  formatRoutingTableRoute,
  routingTableTf,
  formatCbrZone,
  ibmCbrZone,
  formatCbrRule,
  ibmCbrRule,
  cbrTf,
  vpcModuleJson,
  vpcModuleOutputs,
  formatSecretsManagerSecret,
  formatDnsService,
  formatDnsZone,
  formatDnsRecord,
  formatDnsPermittedNetwork,
  formatDnsCustomResolver,
  dnsTf,
  formatLogdnaInstance,
  formatLogdnaKey,
  formatLogdnaArchive,
  formatLogdnaProvider,
  formatSysdigKey,
  formatSysdigInstance,
  loggingMonitoringTf,
  formatAtrackerInstance,
  formatAtrackerKey,
  formatAtrackerArchive,
  calculateNeededSubnetIps,
  getNextCidr,
  powerVsTf,
  formatClassicSshKey,
  formatClassicNetworkVlan,
  classicInfraTf,
} = require("./json-to-iac");
const releaseNotes = require("./docs/release-notes.json");
const docs = require("./docs/docs.json");
const { state } = require("./state");
const { invalidForms } = require("./invalid-forms");

module.exports = {
  shouldDisplayService,
  getDisplaySubnetTiers,
  formatClassicSshKey,
  formatClassicNetworkVlan,
  classicInfraTf,
  wizard,
  invalidCrnList,
  formatAtrackerArchive,
  formatAtrackerKey,
  formatAtrackerInstance,
  loggingMonitoringTf,
  formatSysdigInstance,
  formatSysdigKey,
  formatLogdnaInstance,
  formatLogdnaKey,
  formatLogdnaArchive,
  formatLogdnaProvider,
  state,
  buildTitleComment,
  slzToCraig,
  copyRuleCodeMirrorData,
  copyAclModalContent,
  copySgModalContent,
  validate,
  docsToMd,
  allDocs,
  buildSubnet,
  newF5Vsi,
  changelogToMarkdown,
  constants,
  formatPgw,
  formatSubnet,
  formatAcl,
  formatAclRule,
  tfDone,
  formatVpc,
  tfBlock,
  iamTf,
  formatIamAccountSettings,
  resourceGroupTf,
  lbTf,
  appidTf,
  atrackerTf,
  clusterTf,
  eventStreamsTf,
  f5Tf,
  f5CloudInitYaml,
  flowLogsTf,
  kmsTf,
  cosTf,
  sccTf,
  secretsManagerTf,
  sgTf,
  sshKeyTf,
  tgwTf,
  vpcTf,
  vpeTf,
  vpnTf,
  vsiTf,
  configToFilesJson,
  codeMirrorVpcTf,
  codeMirrorAclTf,
  codeMirrorSubnetsTf,
  codeMirrorEventStreamsTf,
  codeMirrorFormatIamAccountSettingsTf,
  codeMirrorGetDisplay,
  hasDuplicateName,
  genericNameCallback,
  invalidName,
  propsMatchState,
  disableSave,
  invalidNameText,
  validSshKey,
  invalidSubnetTierName,
  invalidSubnetTierText,
  formatConfig,
  getSubnetTierStateData,
  getTierSubnets,
  invalidNewResourceName,
  invalidIpCommaList,
  docs,
  releaseNotes,
  forceShowForm,
  formatRoutingTable,
  ibmIsVpcRoutingTable,
  ibmIsVpcRoutingTableRoute,
  formatRoutingTableRoute,
  routingTableTf,
  disableSshKeyDelete,
  formatCbrZone,
  ibmCbrZone,
  formatCbrRule,
  ibmCbrRule,
  cbrTf,
  vpcModuleJson,
  vpcModuleOutputs,
  cidrBlocksOverlap,
  hasOverlappingCidr,
  invalidCidr,
  invalidCidrText,
  invalidProjectName,
  invalidProjectNameText,
  invalidProjectDescription,
  formatSecretsManagerSecret,
  formatDnsService,
  formatDnsZone,
  formatDnsRecord,
  formatDnsPermittedNetwork,
  formatDnsCustomResolver,
  dnsTf,
  invalidCidrBlock,
  calculateNeededSubnetIps,
  getNextCidr,
  invalidForms,
  invalidCrns,
  invalidCrnText,
  powerVsTf,
  getDisplayTierSubnetList,
};
